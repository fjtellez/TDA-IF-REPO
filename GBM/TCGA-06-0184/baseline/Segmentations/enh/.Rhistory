library(tidyverse)
library(palmerpenguins)
install.packages("palmerpenguins")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(palmerpenguins)
library(knitr)
kable(penguins)
kable(penguins_sm)
penguins_sm <- head(penguins)
kable(penguins_sm)
library(TDA)
reticulate::repl_python()
print("buenas")
library(TDA)
reticulate::repl_python()
print("buenas")
print("buena")
reticulate::repl_python()
print("hola")
print("hola")
quit
source("~/.active-rstudio-document", echo=TRUE)
reticulate::repl_python()
import numpy as np
import matplotlib.pyplot as plt
print("hola")
quit
library(reticulate)
quit
library(reticulate)
library(reticulate)
reticulate::repl_python()
import numpy as np
import matplotlib.pyplot as plt
library(tidyverse)
#This code returns entries in dataset diamonds with the value "Ideal"
#in the column "cut", then gives all that info to the variable diamonds_sm
#Finally, we view the new dataset using View()
diamonds_sm <- filter(diamonds, cut=="Ideal")
View(diamonds_sm)
View(diamonds_sm)
#We can use | to use an "or" condition
diamonds_sm <- filter(diamonds,
cut == "Ideal"|
price>10000)
View(diamonds_sm)
library(reticulate)
reticulate::repl_python()
import numpy as np
import matplotlib.pyplot as plt
print("hola")
quit
```{python}
print("hola")
reticulate::repl_python()
```{python}
```{python}
import numpy as np
print("hola")
print("hola")
print("hola")
print("hola")
print("hola")
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
import numpy as np
x=np.array([1,2,3,4])
for i in range(5):
x=+x
print(x)
import numpy as np
x=np.array([1,2,3,4])
for i in range(5):
x+=x
print(x)
quit
x<-runif(3,min=0,max=1)
x
x<-runif(3,min=0,max=1)
x
x<-runif(3,min=0,max=1)
x
x<-runif(3,min=0,max=1)
x
x<-runif(3,min=0,max=1)
x
x<-runif(3,min=0,max=1)
x
theta<-runif(3,min=0,max=1)
theta
theta<-runif(3,min=0,max=pi)
theta
theta<-runif(3,min=0,max=pi)
theta
theta<-runif(3,min=0,max=pi)
theta
theta<-runif(3,min=0,max=2*pi)
theta
theta<-runif(3,min=0,max=2*pi)
theta
R1<-1
R2<-2
r<-runif(3,0,1)*(R1^2-R2^2)+R2^2)
r<-runif(3,0,1)*(R1**2-R2**2)+R2**2)
r<-runif(3,0,1)*(R1**2-R2**2)+R2**2
r
r<-sqrt(runif(3,0,1)*(R1**2-R2**2)+R2**2)
r
r<-sqrt(runif(3,0,1)*(R1**2-R2**2)+R2**2)
r
x=r*cos(theta)
y=r*sin(theta)
?plot
plot(x,y)
library(ggplot2)
theta<-runif(3,min=0,max=2*pi)
theta
R1<-1
R2<-2
r<-sqrt(runif(3,0,1)*(R1**2-R2**2)+R2**2)
r
x<-r*cos(theta)
y<-r*sin(theta)
plot(x,y)
library(ggplot2)
n<-10
theta<-runif(n,min=0,max=2*pi)
theta
R1<-1
R2<-2
r<-sqrt(runif(n,min=0,max=1)*(R1**2-R2**2)+R2**2)
r
x<-r*cos(theta)
y<-r*sin(theta)
plot(x,y)
n<-100
theta<-runif(n,min=0,max=2*pi)
theta
R1<-1
R2<-2
r<-sqrt(runif(n,min=0,max=1)*(R1**2-R2**2)+R2**2)
r
x<-r*cos(theta)
y<-r*sin(theta)
plot(x,y)
n<-1000
theta<-runif(n,min=0,max=2*pi)
theta
R1<-1
R2<-15
r<-sqrt(runif(n,min=0,max=1)*(R1**2-R2**2)+R2**2)
r
n<-1000
theta<-runif(n,min=0,max=2*pi)
theta
R1<-1
R2<-1.5
r<-sqrt(runif(n,min=0,max=1)*(R1**2-R2**2)+R2**2)
r
x<-r*cos(theta)
y<-r*sin(theta)
plot(x,y)
square =  matrix(c(0,0,0,1,1,0,1,1), nrow = 4, ncol = 2, byrow = TRUE)
square
xx<-matrix(x,nrow=n,ncol=1,byrow=TRUE)
xx
n<-5
theta<-runif(n,min=0,max=2*pi)
theta
R1<-1
R2<-1.5
r<-sqrt(runif(n,min=0,max=1)*(R1**2-R2**2)+R2**2)
r
x<-r*cos(theta)
y<-r*sin(theta)
xx<-matrix(x,nrow=n,ncol=1,byrow=TRUE)
xx
x<-1:12
m <- matrix(x, nrow=3)
m<- matrix(x,ncol)
m
M<-cbind(xx,y)
M
library(ggplot2)
library(ripserr)
n<-5
theta<-runif(n,min=0,max=2*pi)
theta
R1<-1
R2<-1.5
r<-sqrt(runif(n,min=0,max=1)*(R1**2-R2**2)+R2**2)
r
x<-r*cos(theta)
y<-r*sin(theta)
xx<-matrix(x,nrow=n,ncol=1,byrow=TRUE)
xx
M<-cbind(xx,y)
M
plot(x,y)
VR = vietoris_rips(M)
VR
n<-100
theta<-runif(n,min=0,max=2*pi)
theta
R1<-1
R2<-1.5
r<-sqrt(runif(n,min=0,max=1)*(R1**2-R2**2)+R2**2)
r
x<-r*cos(theta)
y<-r*sin(theta)
xx<-matrix(x,nrow=n,ncol=1,byrow=TRUE)
xx
M<-cbind(xx,y)
M
plot(x,y)
VR = vietoris_rips(M)
VR
# create a 2-d point cloud of a circle (100 points)
num.pts <- 100
VR_stats<-calculate_homology(M)
library(ggplot2)
library(ripserr)
library(TDAstats)
n<-100
theta<-runif(n,min=0,max=2*pi)
theta
R1<-1
R2<-1.5
r<-sqrt(runif(n,min=0,max=1)*(R1**2-R2**2)+R2**2)
r
x<-r*cos(theta)
y<-r*sin(theta)
xx<-matrix(x,nrow=n,ncol=1,byrow=TRUE)
xx
M<-cbind(xx,y)
M
plot(x,y)
VR = vietoris_rips(M)
VR
VR_stats<-calculate_homology(M)
plot_barcode(VR_stats)
plot_persist(VR_stats)
n<-1000
theta<-runif(n,min=0,max=2*pi)
theta
R1<-1
R2<-1.5
r<-sqrt(runif(n,min=0,max=1)*(R1**2-R2**2)+R2**2)
r
x<-r*cos(theta)
y<-r*sin(theta)
xx<-matrix(x,nrow=n,ncol=1,byrow=TRUE)
xx
M<-cbind(xx,y)
M
plot(x,y)
VR = vietoris_rips(M)
VR
VR_stats<-calculate_homology(M)
plot_barcode(VR_stats)
plot_persist(VR_stats)
#
M<-matrix(x,nrow=n,ncol=1,byrow=TRUE) %>% cbind(y)
#
M<-matrix(x,nrow=n,ncol=1,byrow=TRUE)+cbind(y)
M
#Number of points in annulus
n<-200
#Generates random numbers in theta coordinate
theta<-runif(n,min=0,max=2*pi)
theta
#Parameters for annulus
R1<-1
R2<-1.5
#Generates random numbers in r coordinate
r<-sqrt(runif(n,min=0,max=1)*(R1**2-R2**2)+R2**2)
#Change of coordinates
x<-r*cos(theta)
y<-r*sin(theta)
#Creates matrix with the data
xx<-matrix(x,nrow=n,ncol=1,byrow=TRUE) %>% cbind(y)
#Change of coordinates
x<-r*cos(theta)
y<-r*sin(theta)
#Creates matrix with the data
xx<-matrix(x,nrow=n,ncol=1,byrow=TRUE)
M<-cbind(xx,y)
M
#Plot of the points on the annulus
plot(x,y)
#Calculates Vietoris-rips complex (using ripserr library)
VR = vietoris_rips(M)
VR
#Calculates Vietoris-rips complex (using TDAstats library)
VR_stats<-calculate_homology(M)
#Plots barcode and persistence diagram
plot_barcode(VR_stats)
plot_persist(VR_stats)
install.packages("BCLR", dependencies=TRUE)
install.packages("BGLR", dependencies=TRUE)
### Clear Console ###
cat("\014")
### Clear Environment ###
rm(list = ls(all = TRUE))
### Load in the R libraries ###
library(BGLR)
library(doParallel)
install.packages("doParallel")
install.packages("Rcpp")
install.packages("RcppArmadillo")
install.packages("RcppParallel")
### Clear Console ###
cat("\014")
### Clear Environment ###
rm(list = ls(all = TRUE))
### Load in the R libraries ###
library(BGLR)
library(doParallel)
library(Rcpp)
library(RcppArmadillo)
library(RcppParallel)
#library(R.matlab)
######################################################################################
######################################################################################
######################################################################################
######################################################################################
######################################################################################
######################################################################################
### Run the R Code that creates the EC Matrices for each image ###
source("./Software/EC3D.R")
### Run the MATLAB Code that creates the EC Matrices for each image ###
system("~/Applications/MATLAB_R2017a.app/bin/matlab -nodisplay -r \"run('./Software/CompEC.m'); exit\"")
### Load in the structural array that holds the EC Matrices ###
Shapes = readMat('./Data/ECs.mat')
### Load in the structural array that holds the EC Matrices ###
Shapes = readMat('./Data/ECs.mat')
### Run the R Code that creates the EC Matrices for each image ###
source("./Software/EC3D.R")
### Run the R Code that creates the EC Matrices for each image ###
source("./Software/EC3D.R")
### Run the R Code that creates the EC Matrices for each image ###
source("./Software/EC3D.R")
### Run the R Code that creates the EC Matrices for each image ###
source("./EC3D.R")
### Run the R Code that creates the EC Matrices for each image ###
source(".../EC3D.R")
### Run the R Code that creates the EC Matrices for each image ###
source("../Documentos/Semestres/Semestre #11/Topological Robotics/EC3D.R")
### Run the R Code that creates the EC Matrices for each image ###
source("./EC3D.R")
### Run the R Code that creates the EC Matrices for each image ###
source("../Documentos/Semestres/Semestre #11/Topological Robotics/R/EC3D.R")
### Run the R Code that creates the EC Matrices for each image ###
source(".R/EC3D.R")
### Run the R Code that creates the EC Matrices for each image ###
source("./R/EC3D.R")
### Run the R Code that creates the EC Matrices for each image ###
source("../R/EC3D.R")
### Run the R Code that creates the EC Matrices for each image ###
source("./uniandes/Semestres/Semestre #11/Topological Robotics/R/EC3D.R")
ptm <- proc.time() #Start clock for timing
### Set up the Parameters ###
startdir = "./Data"
in.dir = "./Data/MITKSegmentations"
out.file = "./Data/MRIECs.RData"
### Run The Euler Characteristic Function ###
ecf = ecf(in.dir = in.dir,out.file = out.file,img.dir = "baseline/Segmentations/enh",first.only = FALSE)
### Run the R Code that creates the EC Matrices for each image ###
source("./uniandes/Semestres/Semestre #11/Topological Robotics/R/EC3D.R")
ptm <- proc.time() #Start clock for timing
### Set up the Parameters ###
startdir = "./Data"
in.dir = "./Data/MITKSegmentations"
out.file = "./Data/MRIECs.RData"
### Run The Euler Characteristic Function ###
ecf = ecf(in.dir = in.dir,out.file = out.file,img.dir = "baseline/Segmentations/enh",first.only = FALSE)
dir.exists("C:/Data/MITKSegmentations")
dir.exists("C:/Data/MITKSegmentations")
dir.exists("C:/Data")
dir.exists("./Data")
### Run the R Code that creates the EC Matrices for each image ###
source("./EC3D.R")
### Run the R Code that creates the EC Matrices for each image ###
source("./uniandes/Semestres/Semestre #11/Topological Robotics/R/EC3D.R")
dir.exists("./uniandes/Semestres/Semestre #11/Topological Robotics/R/Data")
dir.exists("C:/Data/MITKSegmentations")
dir.exists("./uniandes/Semestres/Semestre #11/Topological Robotics/R/MITKSegmentations")
dir.exists("./uniandes/Semestres/Semestre #11/Topological Robotics/R//Data/MITKSegmentations")
### Run The Euler Characteristic Function ###
ecf = ecf(in.dir = in.dir,out.file = out.file,img.dir = "baseline/Segmentations/enh",first.only = FALSE)
dir.exists("./uniandes/Semestres/Semestre #11/Topological Robotics/R/Data/MITKSegmentations")
### Run The Euler Characteristic Function ###
ecf = ecf(in.dir = in.dir,out.file = out.file,img.dir = "baseline/Segmentations/enh",first.only = FALSE)
### Run the R Code that creates the EC Matrices for each image ###
source("./uniandes/Semestres/Semestre #11/Topological Robotics/R/EC3D.R")
ptm <- proc.time() #Start clock for timing
### Set up the Parameters ###
startdir = "./uniandes/Semestres/Semestre #11/Topological Robotics/R/Data"
in.dir = "./uniandes/Semestres/Semestre #11/Topological Robotics/R/Data/MITKSegmentations"
out.file = "./uniandes/Semestres/Semestre #11/Topological Robotics/R/Data/MRIECs.RData"
dir.exists("./uniandes/Semestres/Semestre #11/Topological Robotics/R/Data")
dir.exists("./uniandes/Semestres/Semestre #11/Topological Robotics/R/Data/MITKSegmentations")
### Run The Euler Characteristic Function ###
ecf = ecf(in.dir = in.dir,out.file = out.file,img.dir = "baseline/Segmentations/enh",first.only = FALSE)
### Load in the List that holds the Euler Characteristic (EC) Curves for the TCIA Samples ###
load("./Data/MRI_ECs.RData")
### Load in the List that holds the Euler Characteristic (EC) Curves for the TCIA Samples ###
load("./uniandes/Semestres/Semestre #11/Topological Robotics/R/Data/MRI_ECs.RData")
### Load in the List that holds the Euler Characteristic (EC) Curves for the TCIA Samples ###
load("./uniandes/Semestres/Semestre #11/Topological Robotics/R/Data/MRI_ECs.RData")
### Run the R Code that creates the EC Matrices for each image ###
source("./uniandes/Semestres/Semestre #11/Topological Robotics/R/EC3D.R")
ptm <- proc.time() #Start clock for timing
### Set up the Parameters ###
startdir = "./uniandes/Semestres/Semestre #11/Topological Robotics/R/Data"
in.dir = "./uniandes/Semestres/Semestre #11/Topological Robotics/R/Data/MITKSegmentations"
out.file = "./uniandes/Semestres/Semestre #11/Topological Robotics/R/Data/MRIECs.RData"
dir.exists("./uniandes/Semestres/Semestre #11/Topological Robotics/R/Data")
dir.exists("./uniandes/Semestres/Semestre #11/Topological Robotics/R/Data/MITKSegmentations")
### Load in the List that holds the Euler Characteristic (EC) Curves for the TCIA Samples ###
load("./uniandes/Semestres/Semestre #11/Topological Robotics/R/Data/MRI_ECs.RData")
dir.exists("./uniandes/Semestres/Semestre #11/Topological Robotics/R/Data")
dir.exists("./Data")
dir.exists("C:/uniandes/Semestres/Semestre #11/Topological Robotics/R/Data")
### Run the R Code that creates the EC Matrices for each image ###
source("./uniandes/Semestres/Semestre #11/Topological Robotics/R/EC3D.R")
### Run the R Code that creates the EC Matrices for each image ###
source("./uniandes/Semestres/Semestre #11/Topological Robotics/R/EC3D.R")
### Run the R Code that creates the EC Matrices for each image ###
source("C:/uniandes/Semestres/Semestre #11/Topological Robotics/R/EC3D.R")
### Clear Console ###
cat("\014")
### Clear Environment ###
rm(list = ls(all = TRUE))
### Run the R Code that creates the EC Matrices for each image ###
source("C:/uniandes/Semestres/Semestre #11/Topological Robotics/R/EC3D.R")
dir.exists("C:/Data")
dir.exists("C:/uniandes/Semestres/Semestre #11/Topological Robotics/R/Data")
### Load in the R libraries ###
library(BGLR)
library(doParallel)
library(Rcpp)
library(RcppArmadillo)
library(RcppParallel)
#library(R.matlab)
### Run the R Code that creates the EC Matrices for each image ###
source("C:/uniandes/Semestres/Semestre #11/Topological Robotics/R/EC3D.R")
dir.exists("C:/uniandes/Semestres/Semestre #11/Topological Robotics/R/Data")
dir.exists("C:/uniandes/Semestres/Semestre #11/Topological Robotics/R")
### Run the R Code that creates the EC Matrices for each image ###
source("C:/uniandes/Semestres/Semestre #11/Topological Robotics/R/EC3D.R")
### Run the MATLAB Code that creates the EC Matrices for each image ###
system("~/Applications/MATLAB_R2017a.app/bin/matlab -nodisplay -r \"run('./Software/CompEC.m'); exit\"")
### Run the R Code that creates the EC Matrices for each image ###
source("C:/uniandes/Semestres/Semestre #11/Topological Robotics/R/EC3D.R")
### Run the R Code that creates the EC Matrices for each image ###
source("./uniandes/Semestres/Semestre #11/Topological Robotics/R/EC3D.R")
### Clear Console ###
cat("\014")
### Clear Environment ###
rm(list = ls(all = TRUE))
### Load in the R libraries ###
library(BGLR)
library(doParallel)
library(Rcpp)
library(RcppArmadillo)
library(RcppParallel)
#library(R.matlab)
######################################################################################
######################################################################################
######################################################################################
### Run the MATLAB Code that creates the EC Matrices for each image ###
system("~/Applications/MATLAB_R2017a.app/bin/matlab -nodisplay -r \"run('./Software/CompEC.m'); exit\"")
### Run the R Code that creates the EC Matrices for each image ###
source("./uniandes/Semestres/Semestre #11/Topological Robotics/R/EC3D.R")
dir.exists("C:/R")
dir.exists("C:R")
dir.exists("C:/uniandes/Semestres/Semestre #11/Topological Robotics/R")
dir.exists("C:/Documentos/uniandes/Semestres/Semestre #11/Topological Robotics/R")
dir.exists("C:/Documentos/uniandes/Semestres/Semestre #11/Topological Robotics/R")
dir.exists("C:/uniandes/Semestres/Semestre #11/Topological Robotics/R")
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## R Markdown
### Clear Console ###
cat("\014")
### Clear Environment ###
rm(list = ls(all = TRUE))
### Load in the R libraries ###
library(BGLR)
library(doParallel)
library(Rcpp)
library(RcppArmadillo)
library(RcppParallel)
#library(R.matlab)
######################################################################################
######################################################################################
######################################################################################
### Run the MATLAB Code that creates the EC Matrices for each image ###
system("~/Applications/MATLAB_R2017a.app/bin/matlab -nodisplay -r \"run('./Software/CompEC.m'); exit\"")
### Load in the structural array that holds the EC Matrices ###
#Shapes = readMat('./Data/ECs.mat')
#ECs = matrix(unlist(Shapes$Shapes[seq(2,length(Shapes$Shapes),2)]),nrow = length(Shapes$Shapes)/2,byrow = TRUE)
######################################################################################
######################################################################################
######################################################################################
### Run the R Code that creates the EC Matrices for each image ###
source("./uniandes/Semestres/Semestre #11/Topological Robotics/R/EC3D.R")
dir.exists("C:/uniandes/Semestres/Semestre #11/Topological Robotics/R")
